class TicTacToe {
  field int x, y, length, i, currentSymbol, moveCounter;
  field Array places;
  
  constructor TicTacToe new() {
    let length = 9;
    let i = 0;
    let places = Array.new(length);
    let currentSymbol = 0;
    let moveCounter = 0;

    while (i < length) {
      let places[i] = i;
      let i = i + 1;
    }
    
    return this;
  }

  // draw the initial board to the screen
  method void draw() {
    var int i;
    let i = 0;

    do Screen.setColor(true);
    do Screen.drawLine(220, 50, 220, 180);
    do Screen.drawLine(280, 50, 280, 180);
    do Screen.drawLine(170, 90, 330, 90);
    do Screen.drawLine(170, 140, 330, 140);

    while (i < length) {
      if (~(places[i] = 79) & ~(places[i] = 88)) {
        do fillRows(i + 1);
      } else {
        do drawSymbol(i + 1, places[i]);
      }
      let i = i + 1;
    }

    return;
  }

  // fill each square with a number
  method void fillRows(int i) {
    var int x, y;

    if (i = 1) {
      let x = 6;
      let y = 24;
    }

    if (i = 2) {
      let x = 6;
      let y = 31;
    }

    if (i = 3) {
      let x = 6;
      let y = 38;
    }

    if (i = 4) {
      let x = 10;
      let y = 24;
    }

    if (i = 5) {
      let x = 10;
      let y = 31;
    }

    if (i = 6) {
      let x = 10;
      let y = 38;
    }

    if (i = 7) {
      let x = 14;
      let y = 24;
    }

    if (i = 8) {
      let x = 14;
      let y = 31;
    }

    if (i = 9) {
      let x = 14;
      let y = 38;
    }

    do Output.moveCursor(x, y);
    do Output.printInt(i);

    return;
  }

  // draw symbol (O/X) in the right position
  method void drawSymbol(int position, int symbol) {
    var int x, y, x2, y2, r;
    let r = 10;

    if (symbol = 79) {
      if (position = 1) {
        let x = 195;
        let y = 70;
      }

      if (position = 2) {
        let x = 250;
        let y = 70;
      }

      if (position = 3) {
        let x = 305;
        let y = 70;
      }

      if (position = 4) {
        let x = 195;
        let y = 115;
      }

      if (position = 5) {
        let x = 250;
        let y = 115;
      }

      if (position = 6) {
        let x = 305;
        let y = 115;
      }

      if (position = 7) {
        let x = 195;
        let y = 160;
      }

      if (position = 8) {
        let x = 250;
        let y = 160;
      }

      if (position = 9) {
        let x = 305;
        let y = 160;
      }

      do Screen.drawCircle(x, y, r);
    }


    if (symbol = 88) {
      if (position = 1) {
        let x = 6;
        let y = 24;
        do Output.moveCursor(x, y);
        do Output.printString("");
        let x = 185;
        let y = 60;
        let x2 = 200;
        let y2 = 75;
        do Screen.drawLine(x, y, x2, y2);
        let x = 200;
        let y = 60;
        let x2 = 185;
        let y2 = 75;
        do Screen.drawLine(x, y, x2, y2);
      }

      if (position = 2) {
        let x = 6;
        let y = 31;
        do Output.moveCursor(x, y);
        do Output.printString("");
        let x = 245;
        let y = 60;
        let x2 = 260;
        let y2 = 75;
        do Screen.drawLine(x, y, x2, y2);
        let x = 260;
        let y = 60;
        let x2 = 245;
        let y2 = 75;
        do Screen.drawLine(x, y, x2, y2);
      }

      if (position = 3) {
        let x = 6;
        let y = 38;
        do Output.moveCursor(x, y);
        do Output.printString("");
        let x = 300;
        let y = 60;
        let x2 = 315;
        let y2 = 75;
        do Screen.drawLine(x, y, x2, y2);
        let x = 315;
        let y = 60;
        let x2 = 300;
        let y2 = 75;
        do Screen.drawLine(x, y, x2, y2);
      }

      if (position = 4) {
        let x = 10;
        let y = 24;
        do Output.moveCursor(x, y);
        do Output.printString("");
        let x = 185;
        let y = 105;
        let x2 = 200;
        let y2 = 120;
        do Screen.drawLine(x, y, x2, y2);
        let x = 200;
        let y = 105;
        let x2 = 185;
        let y2 = 120;
        do Screen.drawLine(x, y, x2, y2);
      }

      if (position = 5) {
        let x = 10;
        let y = 31;
        do Output.moveCursor(x, y);
        do Output.printString("");
        let x = 245;
        let y = 105;
        let x2 = 260;
        let y2 = 120;
        do Screen.drawLine(x, y, x2, y2);
        let x = 260;
        let y = 105;
        let x2 = 245;
        let y2 = 120;
        do Screen.drawLine(x, y, x2, y2);
      }

      if (position = 6) {
        let x = 10;
        let y = 38;
        do Output.moveCursor(x, y);
        do Output.printString("");
        let x = 300;
        let y = 105;
        let x2 = 315;
        let y2 = 120;
        do Screen.drawLine(x, y, x2, y2);
        let x = 315;
        let y = 105;
        let x2 = 300;
        let y2 = 120;
        do Screen.drawLine(x, y, x2, y2);
      }

      if (position = 7) {
        let x = 14;
        let y = 24;
        do Output.moveCursor(x, y);
        do Output.printString("");
        let x = 185;
        let y = 155;
        let x2 = 200;
        let y2 = 170;
        do Screen.drawLine(x, y, x2, y2);
        let x = 200;
        let y = 155;
        let x2 = 185;
        let y2 = 170;
        do Screen.drawLine(x, y, x2, y2);
      }

      if (position = 8) {
        let x = 14;
        let y = 31;
        do Output.moveCursor(x, y);
        do Output.printString("");
        let x = 245;
        let y = 155;
        let x2 = 260;
        let y2 = 170;
        do Screen.drawLine(x, y, x2, y2);
        let x = 260;
        let y = 155;
        let x2 = 245;
        let y2 = 170;
        do Screen.drawLine(x, y, x2, y2);
      }

      if (position = 9) {
        let x = 14;
        let y = 38;
        do Output.moveCursor(x, y);
        do Output.printString("");
        let x = 300;
        let y = 155;
        let x2 = 315;
        let y2 = 170;
        do Screen.drawLine(x, y, x2, y2);
        let x = 315;
        let y = 155;
        let x2 = 300;
        let y2 = 170;
        do Screen.drawLine(x, y, x2, y2);
      }
    }
    return;
  }

  // check for a draw
  method boolean checkDraw() {
    var boolean draw;
    let draw = false;
    
    if (getMoveCounter() = 9) {
      let draw = true;
    }

    return draw;
  }

  // check for a winner
  method boolean checkWinner() {
    var boolean winner;
    let winner = false;

    if ((getPosition(0) = getPosition(1)) & 
        (getPosition(1) = getPosition(2))) {
      let winner = true;
    } 

    if ((getPosition(3) = getPosition(4)) & 
        (getPosition(4) = getPosition(5))) {
      let winner = true;
    } 

    if ((getPosition(6) = getPosition(7)) & 
        (getPosition(7) = getPosition(8))) {
      let winner = true;
    } 

    if ((getPosition(0) = getPosition(3)) & 
        (getPosition(3) = getPosition(6))) {
      let winner = true;
    } 

    if ((getPosition(1) = getPosition(4)) & 
        (getPosition(4) = getPosition(7))) {
      let winner = true;
    } 

    if ((getPosition(2) = getPosition(5)) & 
        (getPosition(5) = getPosition(8))) {
      let winner = true;
    } 

    if ((getPosition(0) = getPosition(4)) & 
        (getPosition(4) = getPosition(8))) {
      let winner = true;
    } 

    if ((getPosition(2) = getPosition(4)) & 
        (getPosition(4) = getPosition(6))) {
      let winner = true;
    } 

    return winner;
  }

  // ask user for a starting symbol
  method void setStartingSymbol() {
    var int i;
    var boolean valid;
    let valid = false;

    while (~valid) {
      do Output.moveCursor(0, 0);
      do Output.printString("Who goes first? [X/O]: ");
      let i = Keyboard.readChar();
      if ((i = 79) | (i = 88)) {
        let valid = true;
      } else {
        do Output.moveCursor(0, 23);
        do Output.printString("Incorrect symbol.");
        do Sys.wait(5000);
        do Output.moveCursor(0, 23);
        do Output.printString("                 ");
      }
      do Sys.wait(5000);
    }

    do setCurrentSymbol(i);
    return;
  }

  // set position on board for the symbol entered by user
  method void setPosition(int i) {
    let places[i-1] = currentSymbol;
    do increaseMoveCounter();
    return;
  }

  // get position for the given symbol
  method int getPosition(int i) {
    return places[i];
  }

  // set current symbol. At each stage of the game
  // only one symbol can be active
  method void setCurrentSymbol(int symbol) {
    let currentSymbol = symbol;
    return;
  }

 // get current symbol
  method int getCurrentSymbol() {
    return currentSymbol;
  }

  // increase move counter by 1
  // this is used to determine if there's a draw
  method void increaseMoveCounter() {
    let moveCounter = moveCounter + 1;
    return;
  }

  // retrieve move counter value
  method int getMoveCounter() {
    return moveCounter;
  }
}
